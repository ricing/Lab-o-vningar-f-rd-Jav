package set;

import java.util.ArrayList;
import java.util.Iterator;

public class ArraySet<E> implements SimpleSet<E> {
	private ArrayList<E> data;

	/**
	 * Constructs a new empty set.
	 */
	public ArraySet() {
		data = new ArrayList<>(); // skapar en ny tom lista
	}

	/**
	 * Adds the specified element to this set, if it is not already present.
	 * post: x is added to the set if it is not already present
	 * 
	 * @param x
	 *            the element to be added
	 * @return true if the specified element was added
	 */
	public boolean add(E x) {
		if (!data.contains(x)) {
			data.add(x);
			return true; // lägger till nytt element om det inte redan finns
			// i listan returnera true om det har lagts till //
			// i listan
		}
		return false;
	}

	/**
	 * Removes the specified element from this set if it is present. post: x is
	 * removed if it was present
	 * 
	 * @param x
	 *            the element to remove - if present
	 * @return true if the set contained the specified element
	 */
	public boolean remove(Object x) {
		if (data.contains(x)) {
			data.remove(x);
			return true; // tar bort element i om det är lika med x.
			// returnerar true

		}
		return false;

	}

	/**
	 * Returns true if this set contains the specified element.
	 * 
	 * @param x
	 *            the element whose presence is to be tested
	 * @return true if this set contains the specified element
	 */
	public boolean contains(Object x) {
		// for (int i = 0; i < data.size(); i++) {
		if (data.contains(x)) {
			return true; // kollar om element x finns i listan
			// }
		}
		return false;
	}

	/**
	 * Returns true if this set contains no elements.
	 * 
	 * @return true if this set contains no elements
	 */
	public boolean isEmpty() {
		if (data.size() == 0) {
			return true;
		} else {
			return false;
		}

	}

	/**
	 * Returns the number of elements in this set.
	 * 
	 * @return the number of elements in this set
	 */
	public int size() {
		return data.size();
	}

	/**
	 * Returns an iterator over the elements in this set.
	 * 
	 * @return an iterator over the elements in this set
	 */
	public Iterator<E> iterator() {
		return data.iterator();
	}

	/**
	 * Adds all of the elements in the specified set, for which it is possible,
	 * to this set. post: all elements, for which it is possible, in the
	 * specified set are added to this set.
	 * 
	 * @return true if this set changed as a result of the call
	 */
	public boolean addAll(SimpleSet<? extends E> s) {
		int i = data.size();
		Iterator<? extends E> itr = s.iterator();
		while (itr.hasNext()) {
			E test = itr.next();
			if (!data.contains(test)) {
				data.add(test);
			}
		}
		if (i == data.size()) {
			return false;
		} else {
			return true;
		}
	}
}
